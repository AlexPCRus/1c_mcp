"""–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ MCP-–ø—Ä–æ–∫—Å–∏."""

import asyncio
import json
import logging
from typing import Dict, Any

import httpx
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client

from .config import get_config


logger = logging.getLogger(__name__)


async def test_onec_connection(config):
	"""–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ 1–°."""
	print("=== –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ 1–° ===")
	
	try:
		async with httpx.AsyncClient(
			auth=httpx.BasicAuth(config.onec_username, config.onec_password),
			timeout=10.0
		) as client:
			# –¢–µ—Å—Ç –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
			manifest_url = f"{config.onec_url}/mcp/manifest"
			print(f"–ó–∞–ø—Ä–æ—Å –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {manifest_url}")
			
			response = await client.get(manifest_url)
			response.raise_for_status()
			
			manifest = response.json()
			print(f"‚úÖ –ú–∞–Ω–∏—Ñ–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω: {json.dumps(manifest, indent=2, ensure_ascii=False)}")
			
			# –¢–µ—Å—Ç RPC
			rpc_url = f"{config.onec_url}/mcp/rpc"
			rpc_request = {
				"jsonrpc": "2.0",
				"id": 1,
				"method": "tools/list",
				"params": {}
			}
			
			print(f"–ó–∞–ø—Ä–æ—Å RPC: {rpc_url}")
			print(f"–î–∞–Ω–Ω—ã–µ: {json.dumps(rpc_request, ensure_ascii=False)}")
			
			response = await client.post(rpc_url, json=rpc_request)
			response.raise_for_status()
			
			rpc_response = response.json()
			print(f"‚úÖ RPC –æ—Ç–≤–µ—Ç: {json.dumps(rpc_response, indent=2, ensure_ascii=False)}")
			
	except Exception as e:
		print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ 1–°: {e}")
		return False
	
	return True


async def test_mcp_stdio():
	"""–¢–µ—Å—Ç MCP-–ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ stdio."""
	print("\n=== –¢–µ—Å—Ç MCP-–ø—Ä–æ–∫—Å–∏ (stdio) ===")
	
	try:
		# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–∫—Å–∏
		server_params = StdioServerParameters(
			command="python",
			args=["-m", "src.py_server", "stdio"],
			env={
				"MCP_ONEC_URL": "http://localhost/your_base",
				"MCP_ONEC_USERNAME": "username", 
				"MCP_ONEC_PASSWORD": "password"
			}
		)
		
		print("–ó–∞–ø—É—Å–∫ MCP-–ø—Ä–æ–∫—Å–∏...")
		
		async with stdio_client(server_params) as (read, write):
			async with ClientSession(read, write) as session:
				print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP-–ø—Ä–æ–∫—Å–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
				
				# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
				await session.initialize()
				print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
				
				# –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
				tools = await session.list_tools()
				print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tools.tools)}")
				for tool in tools.tools:
					print(f"  - {tool.name}: {tool.description}")
				
				# –°–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤
				resources = await session.list_resources()
				print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤: {len(resources.resources)}")
				for resource in resources.resources:
					print(f"  - {resource.uri}: {resource.name}")
				
				# –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤
				prompts = await session.list_prompts()
				print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ–º–ø—Ç–æ–≤: {len(prompts.prompts)}")
				for prompt in prompts.prompts:
					print(f"  - {prompt.name}: {prompt.description}")
				
	except Exception as e:
		print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MCP-–ø—Ä–æ–∫—Å–∏: {e}")
		return False
	
	return True


async def test_http_server():
	"""–¢–µ—Å—Ç HTTP-—Å–µ—Ä–≤–µ—Ä–∞."""
	print("\n=== –¢–µ—Å—Ç HTTP-—Å–µ—Ä–≤–µ—Ä–∞ ===")
	
	try:
		async with httpx.AsyncClient(timeout=10.0) as client:
			# –¢–µ—Å—Ç –∫–æ—Ä–Ω–µ–≤–æ–≥–æ endpoint
			response = await client.get("http://localhost:8000/")
			response.raise_for_status()
			
			info = response.json()
			print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ: {json.dumps(info, indent=2, ensure_ascii=False)}")
			
			# –¢–µ—Å—Ç health check
			response = await client.get("http://localhost:8000/health")
			response.raise_for_status()
			
			health = response.json()
			print(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞: {json.dumps(health, indent=2, ensure_ascii=False)}")
			
	except Exception as e:
		print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTTP-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
		return False
	
	return True


async def main():
	"""–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
	logging.basicConfig(level=logging.INFO)
	
	print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ MCP-–ø—Ä–æ–∫—Å–∏")
	
	try:
		config = get_config()
		print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {config.onec_url}")
	except Exception as e:
		print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
		print("–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
		return
	
	# –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ 1–°
	if not await test_onec_connection(config):
		print("‚ùå –¢–µ—Å—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ 1–°")
		return
	
	# –¢–µ—Å—Ç MCP-–ø—Ä–æ–∫—Å–∏ (—Ç—Ä–µ–±—É–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏)
	print("\n‚ö†Ô∏è  –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MCP-–ø—Ä–æ–∫—Å–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:")
	print("   python -m src.py_server stdio")
	print("   –∏–ª–∏")
	print("   python -m src.py_server http")
	
	# –¢–µ—Å—Ç HTTP-—Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω)
	try:
		await test_http_server()
	except:
		print("‚ö†Ô∏è  HTTP-—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	
	print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
	asyncio.run(main()) 