#!/usr/bin/env python3
"""–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP-—Å–µ—Ä–≤–∏—Å–∞ 1–° MCP API.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å HTTP-—Å–µ—Ä–≤–∏—Å–∞ 1–° —á–µ—Ä–µ–∑ onec_client.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç health endpoint –∏ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –ø—Ä–æ–º–ø—Ç–æ–≤.
"""

import asyncio
import json
import logging
from typing import Dict, Any
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ onec_client
sys.path.insert(0, str(Path(__file__).parent))

from onec_client import OneCClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
	level=logging.INFO,
	format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class TestOneCService:
	"""–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTTP-—Å–µ—Ä–≤–∏—Å–∞ 1–°."""
	
	def __init__(self, base_url: str, username: str, password: str):
		"""–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞.
		
		Args:
			base_url: –ë–∞–∑–æ–≤—ã–π URL 1–° (–Ω–∞–ø—Ä–∏–º–µ—Ä, http://localhost/base)
			username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			password: –ü–∞—Ä–æ–ª—å
		"""
		self.client = OneCClient(base_url, username, password)
		self.results = {}
	
	async def test_health(self) -> bool:
		"""–¢–µ—Å—Ç–∏—Ä—É–µ—Ç health endpoint."""
		print("üè• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Health endpoint...")
		try:
			result = await self.client.check_health()
			if result:
				print("‚úÖ Health check —É—Å–ø–µ—à–µ–Ω - —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
				self.results['health'] = {'status': 'success', 'message': '–°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω'}
				return True
			else:
				print("‚ùå Health check –Ω–µ—É—Å–ø–µ—à–µ–Ω")
				self.results['health'] = {'status': 'error', 'message': 'Health check –≤–µ—Ä–Ω—É–ª False'}
				return False
		except Exception as e:
			print(f"‚ùå –û—à–∏–±–∫–∞ Health check: {e}")
			self.results['health'] = {'status': 'error', 'message': str(e)}
			return False
	
	async def test_list_tools(self) -> bool:
		"""–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."""
		print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
		try:
			tools = await self.client.list_tools()
			print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
			
			for i, tool in enumerate(tools, 1):
				print(f"  {i}. {tool.name}")
				print(f"     –û–ø–∏—Å–∞–Ω–∏–µ: {tool.description}")
				if hasattr(tool, 'inputSchema') and tool.inputSchema:
					schema_str = json.dumps(tool.inputSchema, ensure_ascii=False, indent=6)
					print(f"     –°—Ö–µ–º–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:\n{schema_str}")
				print()
			
			self.results['tools'] = {
				'status': 'success', 
				'count': len(tools),
				'tools': [{'name': t.name, 'description': t.description} for t in tools]
			}
			return True
			
		except Exception as e:
			print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
			self.results['tools'] = {'status': 'error', 'message': str(e)}
			return False
	
	async def test_list_resources(self) -> bool:
		"""–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤."""
		print("\nüìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
		try:
			resources = await self.client.list_resources()
			print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(resources)} —Ä–µ—Å—É—Ä—Å–æ–≤:")
			
			for i, resource in enumerate(resources, 1):
				print(f"  {i}. {resource.name}")
				print(f"     URI: {resource.uri}")
				print(f"     –û–ø–∏—Å–∞–Ω–∏–µ: {resource.description}")
				if hasattr(resource, 'mimeType') and resource.mimeType:
					print(f"     MIME-—Ç–∏–ø: {resource.mimeType}")
				print()
			
			self.results['resources'] = {
				'status': 'success',
				'count': len(resources),
				'resources': [{'name': r.name, 'uri': r.uri, 'description': r.description} for r in resources]
			}
			return True
			
		except Exception as e:
			print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
			self.results['resources'] = {'status': 'error', 'message': str(e)}
			return False
	
	async def test_list_prompts(self) -> bool:
		"""–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤."""
		print("\nüí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤...")
		try:
			prompts = await self.client.list_prompts()
			print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(prompts)} –ø—Ä–æ–º–ø—Ç–æ–≤:")
			
			for i, prompt in enumerate(prompts, 1):
				print(f"  {i}. {prompt.name}")
				print(f"     –û–ø–∏—Å–∞–Ω–∏–µ: {prompt.description}")
				if hasattr(prompt, 'arguments') and prompt.arguments:
					print(f"     –ê—Ä–≥—É–º–µ–Ω—Ç—ã ({len(prompt.arguments)}):")
					for arg in prompt.arguments:
						required_mark = "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π" if arg.required else "–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π"
						print(f"       - {arg.name} ({required_mark}): {arg.description}")
				print()
			
			self.results['prompts'] = {
				'status': 'success',
				'count': len(prompts),
				'prompts': [{'name': p.name, 'description': p.description} for p in prompts]
			}
			return True
			
		except Exception as e:
			print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
			self.results['prompts'] = {'status': 'error', 'message': str(e)}
			return False
	
	async def test_call_tool_example(self) -> bool:
		"""–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤ –ø—Ä–∏–º–µ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)."""
		print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞...")
		try:
			tools = await self.client.list_tools()
			if not tools:
				print("‚ö†Ô∏è  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
				return True
			
			# –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
			first_tool = tools[0]
			print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {first_tool.name}")
			
			# –í—ã–∑—ã–≤–∞–µ–º —Å –ø—É—Å—Ç—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
			result = await self.client.call_tool(first_tool.name, {})
			
			print("‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã–∑–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ:")
			for content in result.content:
				if hasattr(content, 'text'):
					print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {content.text}")
				elif hasattr(content, 'data'):
					print(f"  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {len(content.data)} —Å–∏–º–≤–æ–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
			
			if result.isError:
				print("‚ö†Ô∏è  –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É")
			
			self.results['tool_call'] = {'status': 'success', 'tool': first_tool.name}
			return True
			
		except Exception as e:
			print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {e}")
			self.results['tool_call'] = {'status': 'error', 'message': str(e)}
			return False
	
	async def print_summary(self):
		"""–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
		print("\n" + "="*60)
		print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
		print("="*60)
		
		total_tests = len(self.results)
		successful_tests = sum(1 for r in self.results.values() if r['status'] == 'success')
		
		print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
		print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
		print(f"–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö: {total_tests - successful_tests}")
		print()
		
		for test_name, result in self.results.items():
			status_icon = "‚úÖ" if result['status'] == 'success' else "‚ùå"
			print(f"{status_icon} {test_name.replace('_', ' ').title()}")
			
			if result['status'] == 'success':
				if 'count' in result:
					print(f"   –ü–æ–ª—É—á–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {result['count']}")
			else:
				print(f"   –û—à–∏–±–∫–∞: {result['message']}")
		
		print("\n" + "="*60)
		
		# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª
		try:
			with open('test_results.json', 'w', encoding='utf-8') as f:
				json.dump(self.results, f, ensure_ascii=False, indent=2)
			print("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_results.json")
		except Exception as e:
			print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {e}")
	
	async def run_all_tests(self):
		"""–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã."""
		print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTTP-—Å–µ—Ä–≤–∏—Å–∞ 1–° MCP API")
		print("="*60)
		
		tests = [
			self.test_health(),
			self.test_list_tools(),
			self.test_list_resources(),
			self.test_list_prompts(),
			self.test_call_tool_example(),
		]
		
		# –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
		for test in tests:
			await test
		
		await self.print_summary()
		await self.client.close()


async def main():
	"""–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
	# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ 1–°
	# –í–ù–ò–ú–ê–ù–ò–ï: –ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π!
	config = {
		'base_url': 'http://localhost/cg',  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL –±–∞–∑—ã 1–°
		'username': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		'password': ''  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
	}
	
	print("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
	print(f"   URL: {config['base_url']}")
	print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {config['username']}")
	print(f"   –ü–∞—Ä–æ–ª—å: {'*' * len(config['password'])}")
	print()
	
	# –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
	tester = TestOneCService(
		config['base_url'],
		config['username'],
		config['password']
	)
	
	await tester.run_all_tests()


if __name__ == '__main__':
	try:
		asyncio.run(main())
	except KeyboardInterrupt:
		print("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
	except Exception as e:
		print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
		logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main()") 