"""–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ MCP-–ø—Ä–æ–∫—Å–∏."""

import base64
import json
from typing import Dict, Any
from mcp import types


def create_sample_image_base64() -> str:
	"""–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64.
	
	–≠—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π PNG (1x1 –ø–∏–∫—Å–µ–ª—å, –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π).
	"""
	# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π PNG —Ñ–∞–π–ª (1x1 –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –ø–∏–∫—Å–µ–ª—å)
	png_data = bytes([
		0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A,  # PNG signature
		0x00, 0x00, 0x00, 0x0D,  # IHDR chunk length
		0x49, 0x48, 0x44, 0x52,  # IHDR
		0x00, 0x00, 0x00, 0x01,  # width = 1
		0x00, 0x00, 0x00, 0x01,  # height = 1
		0x08, 0x06, 0x00, 0x00, 0x00,  # bit depth, color type, compression, filter, interlace
		0x1F, 0x15, 0xC4, 0x89,  # CRC
		0x00, 0x00, 0x00, 0x0A,  # IDAT chunk length
		0x49, 0x44, 0x41, 0x54,  # IDAT
		0x78, 0x9C, 0x62, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01,  # compressed data
		0xE2, 0x21, 0xBC, 0x33,  # CRC
		0x00, 0x00, 0x00, 0x00,  # IEND chunk length
		0x49, 0x45, 0x4E, 0x44,  # IEND
		0xAE, 0x42, 0x60, 0x82   # CRC
	])
	
	return base64.b64encode(png_data).decode('utf-8')


def demo_response_parsing():
	"""–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏."""
	
	print("üñºÔ∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ MCP-–ø—Ä–æ–∫—Å–∏")
	print("=" * 60)
	
	# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
	sample_image = create_sample_image_base64()
	
	# –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç 1–°
	test_responses = [
		{
			"name": "–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç",
			"response": {
				"content": [
					{
						"type": "text",
						"text": "–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"
					}
				],
				"isError": False
			}
		},
		{
			"name": "–¢–µ–∫—Å—Ç + –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
			"response": {
				"content": [
					{
						"type": "text",
						"text": "–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂ –∑–∞ –º–µ—Å—è—Ü:"
					},
					{
						"type": "image",
						"data": sample_image,
						"mimeType": "image/png"
					}
				],
				"isError": False
			}
		},
		{
			"name": "–ù–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
			"response": {
				"content": [
					{
						"type": "text",
						"text": "–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏:"
					},
					{
						"type": "image",
						"data": sample_image,
						"mimeType": "image/png"
					},
					{
						"type": "text",
						"text": "–í—Ç–æ—Ä–æ–π –≥—Ä–∞—Ñ–∏–∫:"
					},
					{
						"type": "image",
						"data": sample_image,
						"mimeType": "image/jpeg"
					}
				],
				"isError": False
			}
		},
		{
			"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø",
			"response": {
				"content": [
					{
						"type": "unknown_type",
						"text": "–≠—Ç–æ—Ç —Ç–∏–ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
					}
				],
				"isError": False
			}
		}
	]
	
	# –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–≤–µ—Ç–æ–≤
	for test in test_responses:
		print(f"\nüìã –¢–µ—Å—Ç: {test['name']}")
		response = test['response']
		
		# –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ OneCClient.call_tool
		content = []
		if "content" in response:
			for item in response["content"]:
				content_type = item.get("type")
				
				if content_type == "text":
					content.append({
						"type": "TextContent",
						"text": item.get("text", "")
					})
					print(f"   ‚úÖ –¢–µ–∫—Å—Ç: {item.get('text', '')[:50]}...")
				
				elif content_type == "image":
					content.append({
						"type": "ImageContent", 
						"mimeType": item.get("mimeType", "image/png"),
						"data_length": len(item.get("data", ""))
					})
					print(f"   üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {item.get('mimeType', 'image/png')}, —Ä–∞–∑–º–µ—Ä: {len(item.get('data', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
				
				else:
					content.append({
						"type": "TextContent (fallback)",
						"text": str(item.get("text", item))
					})
					print(f"   ‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø '{content_type}', –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–∫ —Ç–µ–∫—Å—Ç")
		
		print(f"   üìä –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(content)}")
	
	print("\n" + "=" * 60)
	print("üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞:")
	print("   ‚Ä¢ text - –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç")
	print("   ‚Ä¢ image - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64 (PNG, JPEG, GIF, WebP)")
	print("   ‚Ä¢ unknown - –ª—é–±–æ–π –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ —Ç–µ–∫—Å—Ç")
	
	print("\nüîß –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –æ—Ç 1–° —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º:")
	example_response = {
		"jsonrpc": "2.0",
		"id": 1,
		"result": {
			"content": [
				{
					"type": "text",
					"text": "–ì—Ä–∞—Ñ–∏–∫ –ø–æ—Å—Ç—Ä–æ–µ–Ω:"
				},
				{
					"type": "image",
					"data": "iVBORw0KGgoAAAANSUhEUgAA...",
					"mimeType": "image/png"
				}
			],
			"isError": False
		}
	}
	
	print(json.dumps(example_response, indent=2, ensure_ascii=False))


if __name__ == "__main__":
	demo_response_parsing() 