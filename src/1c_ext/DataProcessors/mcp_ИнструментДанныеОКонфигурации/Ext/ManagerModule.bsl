Процедура ДобавитьИнструменты(Инструменты) Экспорт

	ДобавитьИнструментСписокМетаданных(Инструменты);
	ДобавитьИнструментСтруктураОбъекта(Инструменты);

КонецПроцедуры

Функция ВыполнитьИнструмент(ИмяИнструмента, Аргументы) Экспорт

    Если ИмяИнструмента = "list_metadata_objects" Тогда
        Возврат СписокМетаданных(Аргументы);
    ИначеЕсли ИмяИнструмента = "get_metadata_structure" Тогда
        Возврат СтруктураОбъектаМетаданных(Аргументы);
    Иначе
        ВызватьИсключение "Неизвестный инструмент: " + ИмяИнструмента;
    КонецЕсли;

КонецФункции

#Область ИнструментСписокМетаданных

Процедура ДобавитьИнструментСписокМетаданных(Инструменты)

	// Создаем описания параметров для инструмента list_metadata_objects
	МассивПараметров = Новый Массив;
	
	// Параметр metaType - тип объекта метаданных
	СписокТиповМетаданных = "Catalogs,Documents,InformationRegisters,AccumulationRegisters,AccountingRegisters,CalculationRegisters,ChartsOfCharacteristicTypes,ChartsOfAccounts,ChartsOfCalculationTypes,BusinessProcesses,Tasks,ExchangePlans,FilterCriteria,Reports,DataProcessors,Enums,CommonModules,SessionParameters,CommonTemplates,CommonPictures,XDTOPackages,WebServices,HTTPServices,WSReferences,Styles,Languages,FunctionalOptions,FunctionalOptionsParameters,DefinedTypes,CommonAttributes,CommonCommands,CommandGroups,Constants,CommonForms,Roles,Subsystems,EventSubscriptions,ScheduledJobs,SettingsStorages,Sequences,DocumentJournals,ExternalDataSources,Interfaces,CommonModules";
	
	МассивПараметров.Добавить(mcp_Метаданные.ПараметрИнструмента(
		"metaType",
		"string",
		"Тип объекта метаданных",
		,
		Истина,
		СписокТиповМетаданных
	));
	
	// Параметр nameMask - маска имени в формате регулярного выражения
	МассивПараметров.Добавить(mcp_Метаданные.ПараметрИнструмента(
		"nameMask",
		"string",
		"Маска имени объекта. Проверяется на вхождение подстроки в имя или синоним объекта."
	));
	
	// Параметр maxItems - максимальное количество возвращаемых результатов
	МассивПараметров.Добавить(mcp_Метаданные.ПараметрИнструмента(
		"maxItems",
		"number",
		"Максимальное количество возвращаемых результатов",
		100
	));
	
	// Создаем JSON-схему параметров
	СхемаПараметров = mcp_Метаданные.СхемаПараметровИнструмента(МассивПараметров);
	
	// Добавляем инструмент в таблицу
	mcp_Метаданные.ДобавитьИнструмент(
		Инструменты,
		"list_metadata_objects",
		"Получение списка объектов метаданных конфигурации с возможностью фильтрации по типу и имени",
		СхемаПараметров
	);

КонецПроцедуры

Функция СписокМетаданных(Аргументы)

	// Значения по умолчанию
	МетаТип     = Аргументы.metaType;
	МаскаИмени  = ?(Аргументы.Свойство("nameMask"), Аргументы.nameMask, "");
	Лимит       = ?(Аргументы.Свойство("maxItems"), Аргументы.maxItems, 100);

	МаскаИмениВРег = ВРег(МаскаИмени);

	// Получаем коллекцию нужного типа
	Попытка
		КоллекцияМД = Метаданные[МетаТип];
	Исключение
		ВызватьИсключение "Неизвестный тип метаданных в metaType: " + МетаТип;
	КонецПопытки;

	МассивСтрок = Новый Массив;
	Счетчик = 0;

	Для Каждого Элемент Из КоллекцияМД Цикл
		// Проверяем маску имени, если она задана
		Если ЗначениеЗаполнено(МаскаИмени) Тогда
			// Простая проверка на вхождение подстроки
			Если СтрНайти(ВРег(Элемент.Имя), МаскаИмениВРег) = 0 
				И СтрНайти(ВРег(Элемент.Синоним), МаскаИмениВРег) = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		// Формируем строку в формате "ПолноеИмя (Синоним)"
		СтрокаРезультата = Элемент.ПолноеИмя() + " (" + Элемент.Синоним + ")";
		МассивСтрок.Добавить(СтрокаРезультата);
		
		Счетчик = Счетчик + 1;
		Если Счетчик >= Лимит Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	// Объединяем строки через символ перевода строки
	Результат = СтрСоединить(МассивСтрок, Символы.ПС);
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ИнструментСтруктураОбъекта

Процедура ДобавитьИнструментСтруктураОбъекта(Инструменты)

	// Создаем описания параметров для инструмента get_metadata_structure
	МассивПараметров = Новый Массив;
	
	// Параметр metaType - тип объекта метаданных (только те, у которых есть структура)
	СписокТиповМетаданных = "Catalogs,Documents,InformationRegisters,AccumulationRegisters,AccountingRegisters,CalculationRegisters,Reports,DataProcessors,ChartsOfCharacteristicTypes,ChartsOfAccounts,ChartsOfCalculationTypes,BusinessProcesses,Tasks,ExchangePlans";
	
	МассивПараметров.Добавить(mcp_Метаданные.ПараметрИнструмента(
		"metaType",
		"string",
		"Тип объекта метаданных",
		,
		Истина,
		СписокТиповМетаданных
	));
	
	// Параметр name - точное имя объекта (не зависимое от регистра)
	МассивПараметров.Добавить(mcp_Метаданные.ПараметрИнструмента(
		"name",
		"string",
		"Точное имя объекта метаданных (без учета регистра)",
		,
		Истина
	));
	
	// Создаем JSON-схему параметров
	СхемаПараметров = mcp_Метаданные.СхемаПараметровИнструмента(МассивПараметров);
	
	// Добавляем инструмент в таблицу
	mcp_Метаданные.ДобавитьИнструмент(
		Инструменты,
		"get_metadata_structure",
		"Получение структуры объекта метаданных (реквизиты, табличные части, измерения, ресурсы)",
		СхемаПараметров
	);

КонецПроцедуры

Функция СтруктураОбъектаМетаданных(Аргументы)

	МетаТип = Аргументы.metaType;
	ИмяОбъекта = Аргументы.name;
	
	// Получаем коллекцию нужного типа
	Попытка
		КоллекцияМД = Метаданные[МетаТип];
	Исключение
		ВызватьИсключение "Неизвестный тип метаданных в metaType: " + МетаТип;
	КонецПопытки;
	
	// Ищем объект метаданных по имени (без учета регистра)
	МетаданныеОбъекта = КоллекцияМД.Найти(ИмяОбъекта);
	Если МетаданныеОбъекта = Неопределено Тогда
		ВызватьИсключение "Объект метаданных не найден: " + МетаТип + "." + ИмяОбъекта;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	
	// Заголовок объекта
	ВывестиЗаголовокОбъектаМетаданных(МассивСтрок, МетаданныеОбъекта, МетаТип);
	
	ВывестиСписокРеквизитовМетаданных(МассивСтрок, МетаданныеОбъекта.СтандартныеРеквизиты, "Стандартные реквизиты");

	// Обработка измерений и ресурсов для регистров
	ЭтоРегистр = ЭтоРегистрМД(МетаданныеОбъекта);
	Если ЭтоРегистр Тогда
		ВывестиСписокРеквизитовМетаданных(МассивСтрок, МетаданныеОбъекта.Измерения, "Измерения");
		ВывестиСписокРеквизитовМетаданных(МассивСтрок, МетаданныеОбъекта.Ресурсы, "Ресурсы");
	КонецЕсли;
	
	ВывестиСписокРеквизитовМетаданных(МассивСтрок, МетаданныеОбъекта.Реквизиты, "Реквизиты");

	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) И МетаданныеОбъекта.Владельцы.Количество() > 0 Тогда
		ВывестиВладельцевМетаданных(МассивСтрок, МетаданныеОбъекта);
	КонецЕсли;
	
	Если Не ЭтоРегистр Тогда
		ВывестиТабличныеЧастиМетаданных(МассивСтрок, МетаданныеОбъекта.ТабличныеЧасти);
	КонецЕсли;
	
	// Объединяем строки через символ перевода строки
	Результат = СтрСоединить(МассивСтрок, Символы.ПС);
	
	Возврат Результат;

КонецФункции

Функция ЭтоРегистрМД(МетаданныеОбъекта)

	Возврат Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеОбъекта)
		ИЛИ Метаданные.РегистрыНакопления.Содержит(МетаданныеОбъекта)
		ИЛИ Метаданные.РегистрыРасчета.Содержит(МетаданныеОбъекта)
		ИЛИ Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта);

КонецФункции

Функция ПолучитьСтрокуТипаМетаданных(ТипРеквизита)

	МассивСтрокТипов = Новый Массив;
	
	Для Каждого Тип Из ТипРеквизита.Типы() Цикл
		ТипМД = Метаданные.НайтиПоТипу(Тип);
		
		Если ТипМД = Неопределено Тогда
			МассивСтрокТипов.Добавить(Строка(Тип));
		Иначе
			СтрокаТипа = ТипМД.ПолноеИмя();
			
			Если Метаданные.Перечисления.Содержит(ТипМД) Тогда
				МассивЗначений = Новый Массив;
				Счетчик = 0;
				Для Каждого ЗначениеПеречисления Из ТипМД.ЗначенияПеречисления Цикл
					Если Счетчик < 10 Тогда
						МассивЗначений.Добавить(ЗначениеПеречисления.Имя);
						Счетчик = Счетчик + 1;
					Иначе
						МассивЗначений.Добавить("...");
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если МассивЗначений.Количество() > 0 Тогда
					СтрокаЗначений = СтрСоединить(МассивЗначений, ", ");
					СтрокаТипа = СтрокаТипа + " (" + СтрокаЗначений + ")";
				КонецЕсли;
			КонецЕсли;
			МассивСтрокТипов.Добавить(СтрокаТипа);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрокТипов, ", ");

КонецФункции

Процедура ВывестиЗаголовокОбъектаМетаданных(МассивСтрок, МетаданныеОбъекта, МетаТип)

	МассивСтрок.Добавить("Структура объекта " + МетаТип + "." + МетаданныеОбъекта.Имя + ":");
	МассивСтрок.Добавить("Синоним: """ + МетаданныеОбъекта.Синоним + """");
	МассивСтрок.Добавить("");

КонецПроцедуры

Процедура ВывестиСписокРеквизитовМетаданных(МассивСтрок, Реквизиты, ИмяРаздела)

	Если Реквизиты.Количество() > 0 Тогда
		МассивСтрок.Добавить(ИмяРаздела + ":");
		
		Для каждого Реквизит Из Реквизиты Цикл
			ТипРекв_Стр = ПолучитьСтрокуТипаМетаданных(Реквизит.Тип);
			МассивСтрок.Добавить(Символы.Таб + Реквизит.Имя + " - " + ТипРекв_Стр + " - """ + Реквизит.Синоним + """");
		КонецЦикла;
		
		МассивСтрок.Добавить("");
	КонецЕсли;

КонецПроцедуры

Процедура ВывестиТабличныеЧастиМетаданных(МассивСтрок, ТабличныеЧасти)

	Если ТабличныеЧасти.Количество() > 0 Тогда
		МассивСтрок.Добавить("Табличные части:");
		
		Для каждого ТабЧасть Из ТабличныеЧасти Цикл
			МассивСтрок.Добавить(Символы.Таб + "ТЧ """ + ТабЧасть.Имя + """ - """ + ТабЧасть.Синоним + """:");
			
			Для каждого Реквизит Из ТабЧасть.Реквизиты Цикл
				ТипРекв_Стр = ПолучитьСтрокуТипаМетаданных(Реквизит.Тип);
				МассивСтрок.Добавить(Символы.Таб + Символы.Таб + Реквизит.Имя + " - " + ТипРекв_Стр + " - """ + Реквизит.Синоним + """");
			КонецЦикла;
		КонецЦикла;
		
		МассивСтрок.Добавить("");
	КонецЕсли;

КонецПроцедуры

Процедура ВывестиВладельцевМетаданных(МассивСтрок, МетаданныеОбъекта)

	МассивСтрок.Добавить("Владельцы:");
	
	Для каждого Владелец Из МетаданныеОбъекта.Владельцы Цикл
		МассивСтрок.Добавить(Символы.Таб + Владелец.ПолноеИмя());
	КонецЦикла;
	
	МассивСтрок.Добавить("");

КонецПроцедуры

#КонецОбласти

